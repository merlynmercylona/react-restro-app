{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nexports.fieldOrForm = fieldOrForm;\nexports.getMeta = getMeta;\nexports.updateFieldState = updateFieldState;\nexports.default = createFieldState;\nexports.createFormState = createFormState;\nvar _initialFieldState = require('../constants/initial-field-state');\nvar _initialFieldState2 = _interopRequireDefault(_initialFieldState);\nvar _isPlainObject = require('./is-plain-object');\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\nvar _mapValues = require('./map-values');\nvar _mapValues2 = _interopRequireDefault(_mapValues);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/* eslint-disable no-use-before-define */\nfunction fieldOrForm(model, value, customInitialFieldState) {\n  // TODO: create toModel()\n  var stringModel = Array.isArray(model) ? model.join('.') : model;\n  if (Array.isArray(value) || (0, _isPlainObject2.default)(value)) {\n    return createFormState(stringModel, value, customInitialFieldState);\n  }\n  return createFieldState(stringModel, value, customInitialFieldState);\n}\n/* eslint-enable no-use-before-define */\n\nfunction getMeta(fieldLike, prop) {\n  if (fieldLike && fieldLike.$form) return fieldLike.$form[prop];\n  return fieldLike[prop];\n}\nfunction getSubModelString(model, subModel) {\n  if (!model) return subModel;\n  return model + '.' + subModel;\n}\nfunction updateFieldState(existingFieldState, updatedFieldState) {\n  var newField = _extends({}, existingFieldState, updatedFieldState);\n  return newField;\n}\nfunction createFieldState(model, value, customInitialFieldState) {\n  return _extends({\n    initialValue: value\n  }, _initialFieldState2.default, customInitialFieldState, {\n    model: model,\n    value: value\n  });\n}\nfunction createFormState(model, values, customInitialFieldState) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return _extends({\n    $form: createFieldState(model, values, customInitialFieldState, options)\n  }, options.lazy ? undefined : (0, _mapValues2.default)(values, function (value, key) {\n    var subModel = getSubModelString(model, key);\n    return fieldOrForm(subModel, value, customInitialFieldState);\n  }));\n}","map":null,"metadata":{},"sourceType":"script"}