{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { DISHES } from '../shared/dishes';\nimport { baseUrl } from '../shared/baseUrl';\nimport fetch from 'cross-fetch';\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: 'POST',\n    body: JSON.stringify(newComment),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'same-origin'\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('Post comments ', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n};\nexport const postFeedback = feedback => dispatch => {\n  const newFeedback = {\n    firstname: feedback.firstname,\n    lastname: feedback.lastname,\n    telnum: feedback.telnum,\n    email: feedback.email,\n    agree: feedback.agree,\n    contactType: feedback.contactType,\n    message: feedback.message\n  };\n  return fetch(baseUrl + 'feedback', {\n    method: 'POST',\n    body: JSON.stringify(newFeedback),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'same-origin'\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(response => {\n    console.log(\"Current State is: \" + JSON.stringify(response));\n    alert(\"Thank you for your feedback!<br/>\" + JSON.stringify(response));\n  }).catch(error => {\n    console.log('Post comments ', error.message);\n    alert('Your feedback could not be posted\\nError: ' + error.message);\n  });\n};\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading(true));\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading(true));\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addLeaders(promos))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addLeaders = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});","map":{"version":3,"sources":["E:\\restaurant-app\\src\\redux\\ActionCreators.js"],"names":["ActionTypes","DISHES","baseUrl","fetch","addComment","comment","type","ADD_COMMENT","payload","postComment","dishId","rating","author","dispatch","newComment","date","Date","toISOString","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","errmess","message","json","catch","console","log","alert","postFeedback","feedback","newFeedback","firstname","lastname","telnum","email","agree","contactType","fetchDishes","dishesLoading","dishes","addDishes","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","fetchLeaders","leadersLoading","addLeaders","leadersFailed","LEADERS_LOADING","LEADERS_FAILED","leaders","ADD_LEADERS"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\nimport { DISHES } from '../shared/dishes';\nimport { baseUrl } from '../shared/baseUrl';\nimport fetch from 'cross-fetch';\n\nexport const addComment = (comment) => ({\n   type: ActionTypes.ADD_COMMENT,\n   payload: comment\n});\n\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\n   const newComment = {\n      dishId: dishId,\n      rating: rating,\n      author: author,\n      comment: comment\n   }\n   newComment.date = new Date().toISOString();\n   \n   return fetch(baseUrl + 'comments', {\n      method: 'POST',\n      body: JSON.stringify(newComment),\n      headers: {\n         'Content-Type': 'application/json'\n      },\n      credentials: 'same-origin'\n   })\n   .then(response => {\n      if (response.ok) {\n         return response;\n      }\n      else {\n         var error = new Error('Error ' + response.status + ': ' + response.statusText);\n         error.response = response;\n         throw error;\n      }\n   }, \n   error => {\n      var errmess = new Error(error.message);\n      throw errmess;\n   })\n   .then(response => response.json())\n   .then(response => dispatch(addComment(response)))\n   .catch(error => { console.log('Post comments ', error.message);\n   alert('Your comment could not be posted\\nError: ' + error.message); })\n}\n\nexport const postFeedback = (feedback) => (dispatch) => {\n   const newFeedback = {\n      firstname: feedback.firstname,\n      lastname: feedback.lastname,\n      telnum: feedback.telnum,\n      email: feedback.email,\n      agree: feedback.agree,\n      contactType: feedback.contactType,\n      message: feedback.message\n   }\n    \n   return fetch(baseUrl + 'feedback', {\n      method: 'POST',\n      body: JSON.stringify(newFeedback),\n      headers: {\n         'Content-Type': 'application/json'\n      },\n      credentials: 'same-origin'\n   })\n   .then(response => {\n      if (response.ok) {\n         return response;\n      }\n      else {\n         var error = new Error('Error ' + response.status + ': ' + response.statusText);\n         error.response = response;\n         throw error;\n      }\n   }, \n   error => {\n      var errmess = new Error(error.message);    \n      throw errmess;\n   })\n   .then(response => response.json())\n   .then(response => { console.log(\"Current State is: \" + JSON.stringify(response)); \n                       alert(\"Thank you for your feedback!<br/>\" + JSON.stringify(response)); })\n   .catch(error => { console.log('Post comments ', error.message);\n                     alert('Your feedback could not be posted\\nError: ' + error.message); })\n}\n\nexport const fetchDishes = () => (dispatch) => {\n   dispatch(dishesLoading(true));\n   \n   return fetch(baseUrl + 'dishes')\n   .then(response => {\n      if (response.ok) {\n         return response;\n      }\n      else {\n         var error = new Error('Error ' + response.status + ': ' + response.statusText);\n         error.response = response;\n         throw error;\n      }\n   }, \n   error => {\n      var errmess = new Error(error.message);\n      throw errmess;\n   })\n   .then(response => response.json())\n   .then(dishes => dispatch(addDishes(dishes)))\n   .catch(error => dispatch(dishesFailed(error.message)));\n}\n\nexport const dishesLoading = () => ({\n   type: ActionTypes.DISHES_LOADING\n});\n\nexport const dishesFailed = (errmess) => ({\n   type: ActionTypes.DISHES_FAILED,\n   payload: errmess\n});\n\nexport const addDishes = (dishes) => ({\n   type: ActionTypes.ADD_DISHES,\n   payload: dishes\n})\n\nexport const fetchComments = () => (dispatch) => {   \n   return fetch(baseUrl + 'comments')\n   .then(response => {\n      if (response.ok) {\n         return response;\n      }\n      else {\n         var error = new Error('Error ' + response.status + ': ' + response.statusText);\n         error.response = response;\n         throw error;\n      }\n   }, \n   error => {\n      var errmess = new Error(error.message);\n      throw errmess;\n   })\n   .then(response => response.json())\n   .then(comments => dispatch(addComments(comments)))\n   .catch(error => dispatch(commentsFailed(error.message)));\n}\n\nexport const commentsFailed = (errmess) => ({\n   type: ActionTypes.COMMENTS_FAILED,\n   payload: errmess\n});\n\nexport const addComments = (comments) => ({\n   type: ActionTypes.ADD_COMMENTS,\n   payload: comments\n})\n\nexport const fetchPromos = () => (dispatch) => {\n   dispatch(promosLoading(true));\n   \n   return fetch(baseUrl + 'promotions')\n   .then(response => {\n      if (response.ok) {\n         return response;\n      }\n      else {\n         var error = new Error('Error ' + response.status + ': ' + response.statusText);\n         error.response = response;\n         throw error;\n      }\n   }, \n   error => {\n      var errmess = new Error(error.message);\n      throw errmess;\n   })\n   .then(response => response.json())\n   .then(promos => dispatch(addPromos(promos)))\n   .catch(error => dispatch(promosFailed(error.message)));\n}\n\nexport const promosLoading = () => ({\n   type: ActionTypes.PROMOS_LOADING\n});\n\nexport const promosFailed = (errmess) => ({\n   type: ActionTypes.PROMOS_FAILED,\n   payload: errmess\n});\n\nexport const addPromos = (promos) => ({\n   type: ActionTypes.ADD_PROMOS,\n   payload: promos\n})\n\nexport const fetchLeaders = () => (dispatch) => {\n   dispatch(leadersLoading(true));\n   \n   return fetch(baseUrl + 'leaders')\n   .then(response => {\n      if (response.ok) {\n         return response;\n      }\n      else {\n         var error = new Error('Error ' + response.status + ': ' + response.statusText);\n         error.response = response;\n         throw error;\n      }\n   }, \n   error => {\n      var errmess = new Error(error.message);\n      throw errmess;\n   })\n   .then(response => response.json())\n   .then(promos => dispatch(addLeaders(promos)))\n   .catch(error => dispatch(leadersFailed(error.message)));\n}\n\nexport const leadersLoading = () => ({\n   type: ActionTypes.LEADERS_LOADING\n});\n\nexport const leadersFailed = (errmess) => ({\n   type: ActionTypes.LEADERS_FAILED,\n   payload: errmess\n});\n\nexport const addLeaders = (leaders) => ({\n   type: ActionTypes.ADD_LEADERS,\n   payload: leaders\n})"]},"metadata":{},"sourceType":"module"}