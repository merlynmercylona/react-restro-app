{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFieldClass = exports.controlPropsMap = undefined;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _propTypes = require('prop-types');\nvar _propTypes2 = _interopRequireDefault(_propTypes);\nvar _get2 = require('../utils/get');\nvar _get3 = _interopRequireDefault(_get2);\nvar _identity = require('../utils/identity');\nvar _identity2 = _interopRequireDefault(_identity);\nvar _omit = require('../utils/omit');\nvar _omit2 = _interopRequireDefault(_omit);\nvar _isPlainObject = require('../utils/is-plain-object');\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\nvar _pick = require('../utils/pick');\nvar _pick2 = _interopRequireDefault(_pick);\nvar _reactRedux = require('react-redux');\nvar _invariant = require('invariant');\nvar _invariant2 = _interopRequireDefault(_invariant);\nvar _actions = require('../actions');\nvar _actions2 = _interopRequireDefault(_actions);\nvar _controlComponent = require('./control-component');\nvar _controlComponent2 = _interopRequireDefault(_controlComponent);\nvar _controlPropsMap2 = require('../constants/control-props-map');\nvar _controlPropsMap3 = _interopRequireDefault(_controlPropsMap2);\nvar _deepCompareChildren = require('../utils/deep-compare-children');\nvar _deepCompareChildren2 = _interopRequireDefault(_deepCompareChildren);\nvar _shallowCompareWithoutChildren = require('../utils/shallow-compare-without-children');\nvar _shallowCompareWithoutChildren2 = _interopRequireDefault(_shallowCompareWithoutChildren);\nvar _getModel = require('../utils/get-model');\nvar _getModel2 = _interopRequireDefault(_getModel);\nvar _getFieldFromState = require('../utils/get-field-from-state');\nvar _getFieldFromState2 = _interopRequireDefault(_getFieldFromState);\nvar _resolveModel = require('../utils/resolve-model');\nvar _resolveModel2 = _interopRequireDefault(_resolveModel);\nvar _getValue = require('../utils/get-value');\nvar _initialFieldState = require('../constants/initial-field-state');\nvar _initialFieldState2 = _interopRequireDefault(_initialFieldState);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar fieldPropTypes = {\n  model: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,\n  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),\n  parser: _propTypes2.default.func,\n  formatter: _propTypes2.default.func,\n  updateOn: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.string), _propTypes2.default.string]),\n  changeAction: _propTypes2.default.func,\n  validators: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.object]),\n  asyncValidators: _propTypes2.default.object,\n  validateOn: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.string), _propTypes2.default.string]),\n  asyncValidateOn: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.string), _propTypes2.default.string]),\n  errors: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.object]),\n  mapProps: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.object]),\n  componentMap: _propTypes2.default.object,\n  dynamic: _propTypes2.default.bool,\n  dispatch: _propTypes2.default.func,\n  getRef: _propTypes2.default.func,\n  // Calculated props\n  fieldValue: _propTypes2.default.object,\n  store: _propTypes2.default.shape({\n    subscribe: _propTypes2.default.func,\n    dispatch: _propTypes2.default.func,\n    getState: _propTypes2.default.func\n  }),\n  storeSubscription: _propTypes2.default.any\n};\nfunction getControlType(control, props, options) {\n  var _controlPropsMap = options.controlPropsMap;\n  var controlDisplayNames = Object.keys(_controlPropsMap).filter(function (controlKey) {\n    var propsMap = _controlPropsMap[controlKey];\n    if ((0, _isPlainObject2.default)(propsMap) && propsMap.component) {\n      return control.type === propsMap.component;\n    }\n    return false;\n  });\n  if (controlDisplayNames.length) return controlDisplayNames[0];\n  try {\n    var controlDisplayName = control.constructor.displayName || control.type.displayName || control.type.name || control.type;\n    if (controlDisplayName === 'input') {\n      controlDisplayName = _controlPropsMap[control.props.type] ? control.props.type : 'text';\n    }\n    return _controlPropsMap[controlDisplayName] ? controlDisplayName : null;\n  } catch (error) {\n    return undefined;\n  }\n}\nvar defaultStrategy = {\n  Control: _controlComponent2.default,\n  controlPropTypes: fieldPropTypes,\n  getFieldFromState: _getFieldFromState2.default,\n  actions: _actions2.default\n};\nfunction createFieldClass() {\n  var customControlPropsMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultStrategy;\n\n  // Use the fieldPropTypes if no controlProptypes have been defined to\n  // maintain backwards compatibiltiy.\n  var controlPropTypes = s.controlPropTypes || fieldPropTypes;\n  function mapStateToProps(state, props) {\n    var model = props.model;\n    var modelString = (0, _getModel2.default)(model, state);\n    var fieldValue = s.getFieldFromState(state, modelString) || _initialFieldState2.default;\n    return {\n      model: modelString,\n      fieldValue: fieldValue\n    };\n  }\n  var options = {\n    controlPropsMap: _extends({}, _controlPropsMap3.default, customControlPropsMap)\n  };\n\n  // TODO: refactor\n  var defaultControlPropsMap = {\n    checkbox: {\n      changeAction: s.actions.checkWithValue,\n      getValue: _getValue.getCheckboxValue,\n      isToggle: true\n    },\n    radio: {\n      isToggle: true\n    }\n  };\n  var Field = function (_Component) {\n    _inherits(Field, _Component);\n    function Field() {\n      _classCallCheck(this, Field);\n      return _possibleConstructorReturn(this, (Field.__proto__ || Object.getPrototypeOf(Field)).apply(this, arguments));\n    }\n    _createClass(Field, [{\n      key: 'shouldComponentUpdate',\n      value: function shouldComponentUpdate(nextProps, nextState) {\n        var dynamic = this.props.dynamic;\n        if (dynamic) {\n          return (0, _deepCompareChildren2.default)(this, nextProps, nextState);\n        }\n        return (0, _shallowCompareWithoutChildren2.default)(this, nextProps);\n      }\n    }, {\n      key: 'createControlComponent',\n      value: function createControlComponent(control) {\n        var props = this.props;\n        if (!control || !control.props || control instanceof _controlComponent2.default) {\n          return control;\n        }\n        var controlType = getControlType(control, props, options);\n        var _props$mapProps = props.mapProps,\n          mapProps = _props$mapProps === undefined ? options.controlPropsMap[controlType] : _props$mapProps;\n        var controlProps = (0, _pick2.default)(props, Object.keys(controlPropTypes));\n        if (!mapProps) {\n          return _react2.default.cloneElement(control, null, this.mapChildrenToControl(control.props.children));\n        }\n        return _react2.default.createElement(s.Control, _extends({}, controlProps, {\n          control: control,\n          controlProps: control.props,\n          component: control.type,\n          mapProps: mapProps\n        }, defaultControlPropsMap[controlType] || {}));\n      }\n    }, {\n      key: 'mapChildrenToControl',\n      value: function mapChildrenToControl(children) {\n        var _this2 = this;\n        if (_react2.default.Children.count(children) > 1) {\n          return _react2.default.Children.map(children, function (child) {\n            return _this2.createControlComponent(child);\n          });\n        }\n        return this.createControlComponent(children);\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _props = this.props,\n          component = _props.component,\n          children = _props.children,\n          fieldValue = _props.fieldValue;\n        var allowedProps = (0, _omit2.default)(this.props, Object.keys(controlPropTypes));\n        var renderableChildren = typeof children === 'function' ? children(fieldValue) : children;\n        if (!component) {\n          (0, _invariant2.default)(_react2.default.Children.count(renderableChildren) === 1, 'Empty wrapper components for <Field> are only possible' + 'when there is a single child. Please check the children' + ('passed into <Field model=\"' + this.props.model + '\">.'));\n          return this.createControlComponent(renderableChildren);\n        }\n        return _react2.default.createElement(component, allowedProps, this.mapChildrenToControl(renderableChildren));\n      }\n    }]);\n    return Field;\n  }(_react.Component);\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== \"production\" ? Field.propTypes = fieldPropTypes : void 0;\n  }\n  Field.defaultProps = {\n    updateOn: 'change',\n    asyncValidateOn: 'blur',\n    parser: _identity2.default,\n    formatter: _identity2.default,\n    changeAction: _actions2.default.change,\n    dynamic: true,\n    component: 'div'\n  };\n  return (0, _resolveModel2.default)((0, _reactRedux.connect)(mapStateToProps)(Field));\n}\nexports.controlPropsMap = _controlPropsMap3.default;\nexports.createFieldClass = createFieldClass;\nexports.default = createFieldClass(_controlPropsMap3.default);","map":null,"metadata":{},"sourceType":"script"}